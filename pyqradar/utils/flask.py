import contextlib
import os
import re
import time
from urllib.parse import quote

from flask import Flask, abort, render_template, request, send_file
from flask_socketio import SocketIO

from pyqradar.utils.logging import LoggerManager, logging

logger = LoggerManager("api")
flask = app = Flask(
    __name__,
    template_folder=os.path.abspath("pyqradar/templates"),
    static_folder=os.path.abspath("pyqradar/statics"),
)
socketio = SocketIO(flask)
logging.getLogger("geventwebsocket").setLevel(logging.ERROR)


@flask.before_request
def block_special_characters():
    """
    Before-request hook to block requests with special characters in the URL.

    Returns:
        Flask response: Returns a JSON response with an error message and a 403 status code if special characters are found.
    """
    if not request.endpoint and re.search(r"[^a-zA-Z0-9/.?=&%@:-]", quote(request.url)):
        return {
            "error": {
                "message": "Forbidden character found in the URL. Please correct the request.",
                "code": 400,
            }
        }


@flask.before_request
def set_start_time():
    """
    Before-request hook to set the start time of the request.

    Sets the `_start_time` attribute in the request object.
    """
    request._start_time = int(time.time() * 1000)


@flask.after_request
def log_request(response):
    """
    After-request hook to log details of the request and response.

    Args:
        response (Flask response): The response object generated by the route.

    Returns:
        Flask response: Returns the original response object.
    """
    with contextlib.suppress(Exception):
        status_code = response.status_code
        method = request.method
        path = request.path
        http_version = request.environ.get("SERVER_PROTOCOL")
        content_length = response.content_length or 0

        if path.startswith("/statics"):
            return response

        start_time = request._start_time
        if start_time:
            current_time = int(time.time() * 1000)
            response_time = f"{(current_time - start_time) / 1000:.5f}"
        else:
            response_time = 0.0

        log_message = f'"{method} {path} {http_version}" {status_code} {content_length} {response_time}'
        logger.info(log_message)

    return response
